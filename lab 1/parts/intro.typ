
#import "../lib.typ": *
#part_count.step() // Обновление счетчика разделов 
#show: fix-indent()

= Введение <intro> // Название и ссылка на него 
Работа №1. Принцип построения систем адаптивного
Управления невозмущенными объектами 

== Цель работы
Освоение принципов построения систем адаптивного
управления на примере задачи слежения выхода скалярного объекта за
эталонным сигналом.

== Методические рекомендации.
До начала работы студенты должны
ознакомиться с анализом устойчивости нелинейных систем методом
функций Ляпунова. 

== Теоретические сведения
Рассмотрим решение задачи адаптивного
слежения, начиная с постановки и заканчивая анализом свойств замкнутой
системы

Постановка задачи. Дан объект 
$ dot(x) = theta x + u $ <eq:object>
где $x$ выход объекта (совпадает с переменной состояния), $u$ сигнал
управления, $theta$ -- неизвестный постоянный параметр.

Цель управления заключается в компенсации неопределенности
$theta$ и обеспечении следующего целевого равенства:
$ lim_(t->oo) (x_m(t) - x(t)) = lim_(t->oo) epsilon(t) =  0 $ <eq:target>
где $epsilon = x_m -x$ --- ошибка управления, $x_m$ --- эталонный сигнал, являющийся выходом динамической модели (_эталонной модели_)
$ dot(x)_m = -lambda x_m + lambda g $ <eq:reference>

где $g$ --- кусочно-непрерывный ограниченный сигнал задания, $lambda > 0$ --- параметр, задающий время переходного процесса. Эталонная модель @eq:reference
определяет желаемое качество слежения объекта @eq:object за сигналом задания $g$.

_Решение задачи_. Временно предположим, что параметр
$theta$
известен.
Тогда, вычисляя производную ошибки слежения
$epsilon$
по времени с учетом
@eq:object и @eq:reference, получим:
$ dot(epsilon) = dot(x)_m - dot(x) = -lambda x_m + lambda g - theta x - u $ <eq:error>

Ошибка слежения будет экспоненциально стремиться к нулю, если
будет выполняться равенство
#math.equation(block: true, numbering: none)[
	$ dot(epsilon) = -lambda epsilon $
]


Приравнивая правые части последнего уравнения и модели @eq:error, находим
искомый закон управления:
#math.equation(block: true, numbering: none)[
	$-lambda x_m + lambda g - theta x - u = -lambda epsilon = -lambda x_m + lambda x$	
]

$ u = -theta x - lambda x + lambda g $ <eq:control>

Таким образом, в случае известного значения параметра
$theta$
закон
управления @eq:control обеспечивает для объекта @eq:object выполнение целевого
равенства @eq:target.

Пусть теперь, как в исходной постановке задачи, параметр
$theta$
неизвестен. Тогда для реализуемости закона управления @eq:control заменим
величину
$theta$
на ее оценку
$hat(theta)$:
$ u = -hat(theta) x - lambda x + lambda g $ <eq:regulator>

Дальнейшее решение задачи сводится к задаче нахождения функции
$hat(theta)(t)$, которая обеспечит устойчивость замкнутой системы и цель
управления @eq:target. Для нахождения
$hat(theta)(t)$
проведем ряд алгебраических
преобразований и воспользуемся методом функций Ляпунова.
Подставим последнее выражение в модель @eq:object и получим:
#math.equation(block: true, numbering: none)[
  $dot(x) = theta x -hat(theta) x - lambda x + lambda g = tilde(theta)x - lambda x + lambda g$
]
где $tilde(theta)=theta - hat(theta)$ параметрическая ошибка. Сформируем модель ошибки
управления:
#math.equation(block: true, numbering: none)[
  $dot(epsilon) = dot(x)_m - dot(x) = -lambda x_m + lambda g - tilde(theta)x + lambda x - lambda g = -lambda epsilon - tilde(theta)x$
]
или
$ dot(epsilon) = -lambda epsilon - tilde(theta) x $ <eq:dot_epsilon>

Выберем функцию Ляпунова:
$ V = 1/2 epsilon^2 + 1/2 tilde(theta)^2 $ <eq:lyapunov>
где $gamma>0$ --- параметр. Вычислим производную по времени функции $V$ c
учетом @eq:dot_epsilon:
#math.equation(block: true, numbering: none)[
  $dot(V) = 1/2 2 epsilon dot(epsilon) + 1/2 2 tilde(theta) dot(tilde(theta)) = -lambda epsilon^2 - tilde(theta) x epsilon - tilde(theta) 1/gamma dot(hat(theta))$
]
// $
// dot(V) = 1/2 2 epsilon dot(epsilon) +  1/2 2 tilde(theta) dot(tilde(theta)) = -lambda epsilon^2 - tilde(theta) x epsilon - tilde(theta) 1/gamma dot(hat(theta))
// $

В соответствии с методом функций Ляпунова выберем алгоритм
формирования оценки
$hat(theta)(t)$
(т.е. правило определения производной
$hat(theta)(t)$) из
условия отрицательности производной функции Ляпунова. Нетрудно
видеть, что при выборе
$ dot(hat(theta)) =-gamma x epsilon $ <eq:adaptive_algorithm>
производная функции Ляпунова будет отрицательной:
#math.equation(block: true, numbering: none)[
  $dot(V)=-lambda epsilon^2<0, forall epsilon != 0.$
]

Алгоритм @eq:adaptive_algorithm, формирующий оценку
$hat(theta)$
, называется алгоритмом
адаптации, а параметр
$gamma$ --- коэффициентом адаптации.

Таким образом, алгоритм адаптивного управления, обеспечивающий
цель @eq:target, представляется настраиваемым регулятором @eq:regulator и алгоритмом
адаптации @eq:adaptive_algorithm. При любых начальных условиях
 $x(0)$, $hat(theta)(0)$ и любом
ограниченном сигнале
$g$
алгоритм управления наделяет замкнутую
систему следующими свойствами:
1. ограниченность всех сигналов в замкнутой системе;
2. асимптотическое стремление ошибки слежения $epsilon$ к нулю;
3. экспоненциальное стремление $hat(theta)$ к $theta$ при выполнении условия
#math.equation(block: true, numbering: none)[
  $integral_(t)^(t+T) x^2(tau)d tau > alpha I > 0$
]
(частного случая условия $integral_(t)^(t+T) x(tau) x^T(tau) d tau > alpha I $, почти всегда выполняемого в задаче
управления скалярным объектом при
$g(t)!=0$
), что следует из свойства 2
и выражения @eq:dot_epsilon;
4. увеличение скорости сходимости параметрической ошибки $tilde(theta)$ к нулю при увеличении коэффициента $gamma$ до некоторого оптимального значения. Дальнейшее повышение $gamma$ приведет к снижению скорости сходимости ошибки и появлению колебаний в системе 
